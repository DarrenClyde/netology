{"version":3,"sources":["components/Button/index.js","containers/App/reducer.js","containers/App/constants.js","containers/App/selectors.js","components/Modal/index.js","containers/HomePage/reducer.js","containers/HomePage/constants.js","containers/HomePage/selectors.js","containers/HomePage/HomePage.js","containers/App/actions.js","containers/HomePage/actions.js","containers/EmployeePage/EmployeePage.js","components/Header/index.js","containers/App/App.js","serviceWorker.js","utils/history.js","reducers.js","configureStore.js","index.js"],"names":["Button","_ref","onClick","children","className","rest","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","defaultProps","initialState","isOpen","modalReducer","state","arguments","length","undefined","action","produce","draft","type","selectModal","modal","makeSelectIsModalOpen","createSelector","globalState","modalRoot","document","getElementById","Modal","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref$target","target","value","name","setState","defineProperty","handleSumbit","e","preventDefault","_this$props","onSubmit","onClose","renderModal","isEdit","_this$state","firstName","lastName","position","description","isBtnEnabled","Fragment","htmlFor","required","onChange","components_Button","disabled","element","id","initialData","appendChild","removeChild","ReactDOM","createPortal","React","Component","employeeReducer","employee","push","index","findIndex","emp","keys","forEach","item","selectEmployees","employees","HomePage","onOpenModal","onCloseModal","onAddEmployee","isModalOpen","history","cellSpacing","map","key","components_Modal","mapStateToProps","createStructuredSelector","employeeState","withConnect","connect","dispatch","addEmployee","compose","withRouter","EmployeePage","onEditEmployee","match","params","find","editEmployee","Header","title","App","components_Header","react_router","path","exact","component","Boolean","window","location","hostname","createBrowserHistory","reducers","combineReducers","router","connectRouter","persistConfig","storage","whitelist","persistedReducer","persistReducer","createReducer","middlewares","routerMiddleware","createLogger","enhancers","applyMiddleware","apply","store","createStore","persistor","persistStore","configureStore","render","es","esm","integration_react","loading","containers_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d08175ef.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport \"./styles.css\";\n\nconst Button = ({ onClick, children, className, ...rest }) => (\n  <button className={`btn ${className}`} onClick={onClick} {...rest}>\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.string.isRequired,\n  className: PropTypes.string,\n}\n\nButton.defaultProps = {\n  className: \"\",\n}\n\nexport default Button;\n","import produce from \"immer\";\nimport { OPEN_MODAL, CLOSE_MODAL } from \"./constants\";\n\nexport const initialState = {\n  isOpen: false\n};\n\nconst modalReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case OPEN_MODAL:\n        draft.isOpen = true;\n        break;\n      case CLOSE_MODAL:\n        draft.isOpen = false;\n        break;\n      default:\n        return state;\n    }\n  });\nexport default modalReducer;\n","export const OPEN_MODAL = 'App/OPEN_MODAL';\nexport const CLOSE_MODAL = 'App/CLOSE_MODAL';","import { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst selectModal = state => state.modal || initialState;\nconst selectRouter = state => state.router;\n\nconst makeSelectIsModalOpen = () =>\n  createSelector(\n    selectModal,\n    globalState => globalState.isOpen,\n  );\n\nconst makeSelectLocation = () =>\n  createSelector(\n    selectRouter,\n    routerState => routerState.location,\n  );\n\nexport {\n  makeSelectIsModalOpen,\n  makeSelectLocation,\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport Button from \"../Button\";\nimport \"./styles.css\";\n\nconst modalRoot = document.getElementById(\"modal\");\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.element = document.createElement(\"div\");\n    this.state = {\n      id: props.initialData ? props.initialData.id : null,\n      firstName: props.initialData ? props.initialData.firstName : \"\",\n      lastName: props.initialData ? props.initialData.lastName : \"\",\n      position: props.initialData ? props.initialData.position : \"\",\n      description: props.initialData ? props.initialData.description : \"\"\n    };\n  }\n\n  componentDidMount() {\n    modalRoot.appendChild(this.element);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.element);\n  }\n\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSumbit = e => {\n    e.preventDefault();\n    const { onSubmit, onClose } = this.props;\n    onSubmit(this.state);\n    onClose();\n  };\n\n  renderModal = onClose => {\n    const { isEdit } = this.props;\n    const { firstName, lastName, position, description } = this.state;\n    const isBtnEnabled = firstName && lastName && position && description;\n\n    return (\n      <>\n        <div className=\"overlay\" onClick={onClose} />\n        <div className=\"modal-box\">\n          <div className=\"modal-title\">\n            {isEdit ? \"Редактировать\" : \"Добавить\"} сотрудника\n          </div>\n          <form>\n            <div className=\"form-box\">\n              <label htmlFor=\"firstName\" className=\"form-label\">\n                Имя\n              </label>\n              <input\n                required\n                type=\"text\"\n                className=\"input-text\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"form-box\">\n              <label htmlFor=\"lastName\">Фамилия</label>\n              <input\n                required\n                type=\"text\"\n                className=\"input-text\"\n                name=\"lastName\"\n                value={lastName}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"form-box\">\n              <label htmlFor=\"position\">Должность</label>\n              <input\n                required\n                type=\"text\"\n                className=\"input-text\"\n                name=\"position\"\n                value={position}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"form-box\">\n              <label htmlFor=\"description\">Описание</label>\n              <textarea\n                required\n                name=\"description\"\n                onChange={this.handleChange}\n                className=\"area\"\n                value={description}\n              />\n            </div>\n            <div className=\"bottom-buttons\">\n              <Button onClick={this.handleSumbit} disabled={!isBtnEnabled}>\n                {isEdit ? \"Сохранить\" : \"Добавить\"}\n              </Button>\n              <Button onClick={onClose} className=\"red\">\n                Отменить\n              </Button>\n            </div>\n          </form>\n        </div>\n      </>\n    );\n  };\n\n  render() {\n    return ReactDOM.createPortal(\n      this.renderModal(this.props.onClose),\n      this.element\n    );\n  }\n}\n\nModal.propTypes = {\n  isEdit: PropTypes.bool,\n  initialData: PropTypes.shape({\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    position: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nModal.defaultProps = {\n  isEdit: false,\n  initialData: null,\n}\n\nexport default Modal;\n","import produce from \"immer\";\nimport { ADD_EMPLOYEE, EDIT_EMPLOYEE } from \"./constants\";\n\nexport const initialState = [\n  {\n    id: 1,\n    firstName: \"Иван\",\n    lastName: \"Петров\",\n    position: \"Директор\",\n    description: \"Очень хороший сотрудник\"\n  }\n];\n\nconst employeeReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case ADD_EMPLOYEE:\n        action.employee.id = draft.length + 1;\n        draft.push(action.employee);\n        break;\n      case EDIT_EMPLOYEE:\n        const { id } = action.employee;\n        const index = draft.findIndex(emp => emp.id === id);\n        Object.keys(draft[index]).forEach(\n          item => (draft[index][item] = action.employee[item])\n        );\n        break;\n      default:\n        return state;\n    }\n  });\n\nexport default employeeReducer;\n","export const ADD_EMPLOYEE = \"HomePage/ADD_EMPLOYEE\";\nexport const EDIT_EMPLOYEE = \"HomePage/EDIT_EMPLOYEE\";","import { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst selectEmployees = state => state.employees || initialState;\n\nconst makeSelectEmployees = () =>\n  createSelector(\n    selectEmployees,\n    employeeState => employeeState\n  );\n\nconst makeSelectEmployee = id =>\n  createSelector(\n    selectEmployees,\n    employeeState => employeeState.find(item => item.id === id)\n  );\n\nexport { makeSelectEmployees, makeSelectEmployee };\n","import React from \"react\";\nimport { compose } from \"redux\";\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Button from \"components/Button\";\nimport { makeSelectIsModalOpen } from \"containers/App/selectors\";\nimport { openModal, closeModal } from \"containers/App/actions\";\nimport { addEmployee } from \"./actions\";\nimport Modal from \"components/Modal\";\nimport { makeSelectEmployees } from \"./selectors\";\nimport \"./styles.css\";\n\nconst HomePage = ({\n  onOpenModal,\n  onCloseModal,\n  onAddEmployee,\n  isModalOpen,\n  employees,\n  history\n}) => {\n  return (\n    <>\n      <div className=\"table-box\">\n        <table className=\"list\" cellSpacing=\"0\">\n          <thead>\n            <tr className=\"table-header\">\n              <th>Имя</th>\n              <th>Фамилия</th>\n              <th>Должность</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employees.map(item => (\n              <tr\n                className=\"table-line\"\n                key={item.id}\n                onClick={() => history.push(`/netology-test/${item.id}`)}\n              >\n                <td>{item.firstName}</td>\n                <td>{item.lastName}</td>\n                <td>{item.position}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <Button onClick={onOpenModal}>Добавить сотрудника</Button>\n      {isModalOpen && (\n        <Modal\n          onClose={onCloseModal}\n          onSubmit={employee => onAddEmployee(employee)}\n        />\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  employees: makeSelectEmployees(),\n  isModalOpen: makeSelectIsModalOpen()\n});\n\nexport const mapDispatchToProps = dispatch => ({\n  onOpenModal: () => dispatch(openModal()),\n  onCloseModal: () => dispatch(closeModal()),\n  onAddEmployee: employee => dispatch(addEmployee(employee))\n});\n\nHomePage.propTypes = {\n  employees: PropTypes.array,\n  isModalOpen: PropTypes.bool.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n  onAddEmployee: PropTypes.func.isRequired,\n}\n\nHomePage.defaultProps = {\n  employees: []\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  withConnect,\n  withRouter\n)(HomePage);\n","import { OPEN_MODAL, CLOSE_MODAL } from \"./constants\";\n\nexport const openModal = () => ({\n  type: OPEN_MODAL,\n});\n\nexport const closeModal = () => ({\n  type: CLOSE_MODAL,\n});","import { ADD_EMPLOYEE, EDIT_EMPLOYEE } from \"./constants\";\n\nexport const addEmployee = (employee) => ({\n  type: ADD_EMPLOYEE,\n  employee,\n});\n\nexport const editEmployee = (employee) => ({\n  type: EDIT_EMPLOYEE,\n  employee,\n});","import React from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from 'prop-types';\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { makeSelectEmployee } from \"containers/HomePage/selectors\";\nimport { makeSelectIsModalOpen } from \"containers/App/selectors\";\nimport { openModal, closeModal } from \"containers/App/actions\";\nimport { editEmployee } from \"containers/HomePage/actions\";\nimport Button from \"components/Button\";\nimport Modal from \"components/Modal\";\nimport \"./styles.css\";\n\nconst EmployeePage = ({\n  employee,\n  history,\n  isModalOpen,\n  onCloseModal,\n  onOpenModal,\n  onEditEmployee\n}) => {\n  return (\n    <>\n      <div className=\"employee\">\n        <div className=\"header\">\n          <Button onClick={() => history.push(\"/netology-test/\")}>Назад к списку</Button>\n          <h3>Страница сотрудника #{employee.id}</h3>\n          <Button onClick={onOpenModal} className=\"edit-btn\">Редактировать</Button>\n        </div>\n        <div className=\"info\">\n          <p>\n            <b>Имя:</b> {employee.firstName}\n          </p>\n          <p>\n            <b>Фамилия:</b> {employee.lastName}\n          </p>\n          <p>\n            <b>Должность:</b> {employee.position}\n          </p>\n          <p>\n            <b>Описание:</b> {employee.description}\n          </p>\n        </div>\n      </div>\n      {isModalOpen && (\n        <Modal\n          isEdit\n          onClose={onCloseModal}\n          onSubmit={employee => onEditEmployee(employee)}\n          initialData={employee}\n        />\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state, props) =>\n  createStructuredSelector({\n    employee: makeSelectEmployee(+props.match.params.id),\n    isModalOpen: makeSelectIsModalOpen()\n  });\n\nexport const mapDispatchToProps = dispatch => ({\n  onOpenModal: () => dispatch(openModal()),\n  onCloseModal: () => dispatch(closeModal()),\n  onEditEmployee: employee => dispatch(editEmployee(employee))\n});\n\nEmployeePage.propTypes = {\n  employee: PropTypes.object,\n  isModalOpen: PropTypes.bool.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n  onEditEmployee: PropTypes.func.isRequired,\n}\n\nEmployeePage.defaultProps = {\n  employee: {},\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  withConnect,\n  withRouter\n)(EmployeePage);\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nconst Header = ({ title }) => <header className=\"title\">{title}</header>;\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"../HomePage\";\nimport EmployeePage from \"../EmployeePage\";\nimport Header from 'components/Header';\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Header title=\"База сотрудников\" />\n    <Switch>\n      <Route path=\"/netology-test/\" exact component={HomePage} />\n      <Route path=\"/netology-test/:id\" component={EmployeePage} />\n    </Switch>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport modalReducer from \"containers/App/reducer\";\nimport employeeReducer from \"containers/HomePage/reducer\";\n\nimport history from \"utils/history\";\n\nexport default () => {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    modal: modalReducer,\n    employees: employeeReducer,\n  });\n  return rootReducer;\n};\n","\nimport createReducer from './reducers';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from 'redux-logger'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['employees']\n}\n\nexport default function configureStore(initialState = {}, history) {\n  const persistedReducer = persistReducer(persistConfig, createReducer())\n  const middlewares = [routerMiddleware(history), createLogger()];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(persistedReducer, initialState, compose(...enhancers));\n  const persistor = persistStore(store)\n\n  return { store, persistor };\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport history from \"utils/history\";\nimport configureStore from \"./configureStore\";\n\nconst { store, persistor } = configureStore({}, history);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}